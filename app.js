// Generated by CoffeeScript 1.8.0
(function () {
    var app, db_doesnt_include, express, cookieParser, bodyParser, insert_if_new, instagram, io, last_set, server, update_geo_media, update_tag_media;

    express = require('express');
    cookieParser = require('cookie-parser');
    bodyParser = require('body-parser');

    app = express();

    server = app.listen(process.env.PORT || 5000);

    io = require('socket.io').listen(server);

    instagram = require('./instagram');

    last_set = [];

    /**
     * Setup some environment variables (heroku) with defaults if not present
     */
    var port = process.env.PORT || 5000; // use heroku's dynamic port or 3001 if localhost

    process.env.CLIENT_ID = "b72d081f9d4e48639b48bdc682eafc99";
    process.env.CALLBACK_URL = "http://localhost:5000";
    process.env.CLIENT_SECRET = "fd88310566744275a3d68092d9c175d1";

    app.set('views', __dirname + '/views');
    app.set('view engine', 'ejs');
    app.use(express["static"](__dirname + "/public"));
    app.use(bodyParser.urlencoded({
        extended: true
    }));

    io.set('log level', 1);

    io.configure(function () {
        io.set("transports", ["xhr-polling"]);
        return io.set("polling duration", 10);
    });

    io.on('connection', function (socket) {
        return socket.emit('bootstrap', last_set);
    });

    app.get('/stats', function (req, res) {
        return res.json(process.memoryUsage());
    });

    db_doesnt_include = function (db, id) {
        var ids;
        ids = db.map(function (item) {
            return item.id;
        });
        return ids.indexOf(id) < 0;
    };

    insert_if_new = function (photo) {
        if (db_doesnt_include(last_set, photo.id)) {
            console.log("+ YES new: " + photo.id);
            last_set.push(photo);
            return io.sockets.emit('new', photo);
        } else {
            return console.log("- NOT new: " + photo.id);
        }
    };

    update_tag_media = function (object_id) {
        return instagram.getTagMedia(object_id, function (err, data) {
            var photo, _i, _len, _ref, _results;
            _ref = data.data;

            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                photo = _ref[_i];
                _results.push(insert_if_new(photo));
            }
            return _results;
        });
    };

    update_geo_media = function (object_id) {
        console.log('update_geo_media');
        return instagram.getGeoMedia(object_id, function (err, data) {
            var photo, _i, _len, _ref, _results;
            console.log('update_geo_media err', err);
            _ref = data.data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                photo = _ref[_i];
                _results.push(insert_if_new(photo));
            }
            return _results;
        });
    };

    app.get('/notify', function (req, res) {
        if (req.query && req.query['hub.mode'] === 'subscribe') {
            console.log("Confirming new Instagram real-time subscription for " + req.params.id + " with " + req.query['hub.challenge']);
            return res.send(req.query['hub.challenge']);
        } else {
            console.log("Weird request to /notify, didn't have a hub.mode...");
            return res.send('OK');
        }
    });

    app.post('/notify/:id', function (req, res) {
        var notification, _i, _len, _ref;
        console.log('Notification for', req.params.id);
        console.log(req.body);
        _ref = req.body;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            notification = _ref[_i];
            if (notification.object === "tag") {
                update_tag_media(notification.object_id);
            }
            if (notification.object === "geography") {
                update_geo_media(notification.object_id);
            }
        }
        return res.send('OK');
    });

    //update_geo_media('3503334');

    //update_tag_media('100happydays');
    update_tag_media('romeudog');

    setInterval(function () {
        console.log('teste ok');
        console.log(last_set.length, "last_set length");
        //update_geo_media('3503334');
        return update_tag_media('romeudog');
    }, 5000);

    setTimeout(function () {
        return io.sockets.emit('reload', '');
    }, 1500);

}).call(this);
